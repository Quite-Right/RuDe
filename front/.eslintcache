[{"C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\index.tsx":"1","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\reportWebVitals.ts":"2","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\App.tsx":"3","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\InputFile\\InputFile.tsx":"4","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\Report\\Report.tsx":"5","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\AlertTemplate\\AlertTemplate.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":1014,"mtime":1611941789028,"results":"10","hashOfConfig":"8"},{"size":3482,"mtime":1611941127548,"results":"11","hashOfConfig":"8"},{"size":1873,"mtime":1611941053379,"results":"12","hashOfConfig":"8"},{"size":356,"mtime":1611941818092,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1fzln70",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\index.tsx",[],["29","30"],"C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\reportWebVitals.ts",[],"C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\App.tsx",[],"C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\InputFile\\InputFile.tsx",["31","32","33"],"import { useState, useRef } from 'react';\r\nimport { useAlert } from \"react-alert\";\r\nimport { Download } from \"@styled-icons/bootstrap\";\r\nimport { Close } from \"@styled-icons/ionicons-sharp\";\r\n\r\nfunction InputFile() {\r\n  const [upload, setUpload] = useState<any | undefined>(undefined);\r\n  const ref = useRef();\r\n  const [drag, setDrag] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [errorName, setErrorName] = useState(\"\");\r\n  const alert = useAlert();\r\n\r\n  function dragStartHandler(e: React.DragEvent<HTMLDivElement>) {\r\n    e.preventDefault()\r\n    setDrag(true)\r\n  }\r\n\r\n  function dragLeaveHandler(e: React.DragEvent<HTMLDivElement>) {\r\n    e.preventDefault()\r\n    setDrag(false)\r\n  }\r\n\r\n  function onDropHandler(e: React.DragEvent<HTMLDivElement>) {\r\n    e.preventDefault()\r\n    let file = e.dataTransfer.files[0]\r\n    validateInput(file)\r\n    setDrag(false)\r\n    setUpload(file)\r\n  }\r\n\r\n  function handleUpload() {\r\n    validateInput(upload)\r\n    if (hasError) {\r\n      // alert.error(errorName)\r\n    } else {\r\n      console.log(upload)\r\n    }\r\n  }\r\n\r\n  function validateInput(e: any) {\r\n    let split = e.name.split(\".\");\r\n    if (split[split.length - 1] !== \"txt\") {\r\n      setHasError(true);\r\n      setErrorName(\"Wrong file format\");\r\n    } else if (e.size > 1024 * 1024 * 10) {\r\n      setHasError(true);\r\n      setErrorName(\"File size larger than 10Mb\");\r\n    } else {\r\n      setHasError(false);\r\n      setErrorName(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input unselectable\">\r\n      <div className=\"input__content\">\r\n        {upload ?\r\n          //Файл заружен\r\n          <div className=\"loaded\">\r\n            <Close onClick={() => setUpload(undefined)} className=\"loaded__cancel\" />\r\n            <div className=\"loaded__name\">\r\n              {upload.name}\r\n            </div>\r\n          </div>\r\n          : drag\r\n            //Дрoп файла\r\n            ?\r\n            <div\r\n              onDragStart={e => dragStartHandler(e)}\r\n              onDragLeave={e => dragLeaveHandler(e)}\r\n              onDragOver={e => dragStartHandler(e)}\r\n              onDrop={e => onDropHandler(e)}\r\n              className=\"waiting-drop\">\r\n              <Download className=\"waiting__icon\" />\r\n              <label className=\"waiting__label-main\">Drop to upload</label>\r\n            </div>\r\n            //oснoвнoй\r\n            :\r\n            <div\r\n              onDragStart={e => dragStartHandler(e)}\r\n              onDragLeave={e => dragLeaveHandler(e)}\r\n              onDragOver={e => dragStartHandler(e)}\r\n              className=\"waiting\">\r\n              <Download className=\"waiting__icon\" />\r\n              <label className=\"waiting__label-main\">Drag file here</label>\r\n              <div className=\"waiting__sub-text\">\r\n                <label className=\"waiting__label-sub\">Or </label>\r\n                <label htmlFor=\"file\" className=\"waiting__label-link\"> choose a file</label>\r\n              </div>\r\n\r\n            </div>}\r\n      </div>\r\n      {!upload ?\r\n        <input type=\"file\" id=\"file\" name=\"file\" className=\"display-none\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          if (e && e.target && e.target.files && e.target.files[0]) {\r\n            setUpload(e.target.files[0]);\r\n          }\r\n        }} />\r\n        : \"\"}\r\n      <button className=\"input__upload\" onClick={(e) => handleUpload()} disabled={upload ? false : true}>Upload</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputFile","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\Report\\Report.tsx",["34"],"import { useParams } from \"react-router-dom\";\r\nconst data = [\r\n    {\r\n        type: \"type 1\",\r\n        thread: \"thread 1\",\r\n        source: \"source 1\"\r\n    },\r\n    {\r\n        type: \"type 2\",\r\n        thread: \"thread 2\",\r\n        source: \"source 2\"\r\n    },\r\n    {\r\n        type: \"type 3\",\r\n        thread: \"thread 3\",\r\n        source: \"source 3\"\r\n    },\r\n    {\r\n        type: \"type 4\",\r\n        thread: \"thread 4\",\r\n        source: \"source 4\"\r\n    }\r\n]\r\n\r\ninterface IParams{\r\n  id: string;\r\n}\r\n\r\nconst Report = () => {\r\n    const {id} = useParams<IParams>();\r\n    return (\r\n        <div className=\"report\">\r\n            <table className=\"report__table\">\r\n                <tr className=\"report__table__header\">\r\n                    <td className=\"report__table__header__first\">Type</td>\r\n                    <td className=\"report__table__header__second\">Thread</td>\r\n                    <td className=\"report__table__header__third\">Source</td>\r\n                </tr>\r\n                {data.map(({ type, thread, source }) => {\r\n                    return (\r\n                        <tr className=\"report__table__body\">\r\n                            <td className=\"report__table__body__first\">{type}</td>\r\n                            <td className=\"report__table__body__second\">{thread}</td>\r\n                            <td className=\"report__table__body__third\">{source}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n\r\n            </table>\r\n\r\n            <div className=\"report__result\">\r\n                <div className=\"report__result__button unselectable\" id=\"good\">No threat detected</div>\r\n                <div className=\"report__result__button unselectable\" id=\"bad\">Threat detected</div>\r\n                {/* <div onClick={() => console.log(Path)}>Path</div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","C:\\Users\\quiteRight\\Desktop\\RuDe\\front\\src\\components\\AlertTemplate\\AlertTemplate.tsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":8,"column":9,"nodeType":"41","messageId":"42","endLine":8,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":11,"column":10,"nodeType":"41","messageId":"42","endLine":11,"endColumn":19},{"ruleId":"39","severity":1,"message":"44","line":12,"column":9,"nodeType":"41","messageId":"42","endLine":12,"endColumn":14},{"ruleId":"39","severity":1,"message":"45","line":30,"column":12,"nodeType":"41","messageId":"42","endLine":30,"endColumn":14},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'ref' is assigned a value but never used.","Identifier","unusedVar","'errorName' is assigned a value but never used.","'alert' is assigned a value but never used.","'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]